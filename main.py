import json
import csv

class Animal:
    _my_zoo = []

    def __init__(self, name, age):
        self.name = name
        self.age = age
        Animal._my_zoo.append(self)

    @classmethod
    def fn(cls, name):  # –Ω–∞–π—Ç–∏ —Ç–≤–∞—Ä—å –ø–æ –∏–º–µ–Ω–∏
        return next((animal for animal in cls._my_zoo if animal.name == name), None)

    @classmethod
    def view_zoo(cls):
        print(format(" –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö: ", "-^65"))
        for animal in cls._my_zoo:
            print(f'{animal.name:<23} –≤–æ–∑—Ä–∞—Å—Ç {animal.age:>4}.\t', end="")
            animal_sounds(animal)
        print(format(len(cls._my_zoo), "-^65"))

    @classmethod
    def save_animals_to_file(cls, file_data='data', file_type='TXT'):
        "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ñ–∞–π–ª —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        def format_animal(animal):
            return {
                "class": animal.__class__.__name__,
                "name": animal.name,
                "age": animal.age
            }

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = []
        for animal in cls._my_zoo:
            if isinstance(animal, Animal):
                if hasattr(animal, 'name') and hasattr(animal, 'age'):
                    data.append(format_animal(animal))
                else:
                    print(f"–û—à–∏–±–∫–∞: –û–±—ä–µ–∫—Ç {animal} –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.")
            else:
                print(f"–û—à–∏–±–∫–∞: –û–±—ä–µ–∫—Ç {animal} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Animal –∏–ª–∏ –µ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_path = f"{file_data}.{file_type.lower()}"

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            with open(file_path, "w", encoding='utf-8') as file:
                match file_type.upper():
                    case 'TXT':
                        for entry in data:
                            json_str = json.dumps(entry, ensure_ascii=False)
                            file.write(f"{json_str}\n")
                        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path} –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT.")

                    case 'JSON':
                        json.dump(data, file, ensure_ascii=False, indent=4)
                        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path} –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")

                    case 'CSV':
                        writer = csv.DictWriter(file, fieldnames=["class", "name", "age"])
                        writer.writeheader()
                        for entry in data:
                            writer.writerow(entry)
                        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path} –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")

                    case _:
                        print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: TXT, JSON, CSV.")
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞: {e}")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    @classmethod
    def load_animals_from_file(cls, file_data='data', file_type='TXT'):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.

        :param cls: –ö–ª–∞—Å—Å, —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.
        :param file_data: –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.
        :param file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ ('TXT', 'JSON', 'CSV').
        :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ cls.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cls - —ç—Ç–æ –∫–ª–∞—Å—Å
        if not isinstance(cls, type):
            print("–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–æ–º.")
            return []

        file_path = f"{file_data}.{file_type.lower()}"

        try:
            with open(file_path, "r", encoding='utf-8') as file:
                if file_type.upper() == 'TXT':
                    data = []
                    for line in file:
                        entry = json.loads(line)
                        data.append(entry)
                elif file_type.upper() == 'JSON':
                    data = json.load(file)
                elif file_type.upper() == 'CSV':
                    reader = csv.DictReader(file)
                    data = [row for row in reader]
                else:
                    print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
                    return []

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            for entry in data:
                class_name = entry['class']
                if class_name in globals():
                    obj_class = globals()[class_name]
                    obj = obj_class(name=entry['name'], age=entry['age'])
                    # cls._my_zoo.append(obj)
                else:
                    print(f"–û—à–∏–±–∫–∞: –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        except FileNotFoundError:
            print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞: {e}")
            return []
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON.")
            return []
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return []

    def delete_animal(self):
        if self in Animal._my_zoo:
            print(f'–£–±–∏—Ç {self.name}')
            Animal._my_zoo.remove(self)
            del self

    def __del__(self):
        if self in Animal._my_zoo:
            Animal._my_zoo.remove(self)

    def make_sound(self):
        print("–ì–æ–≤–æ—Ä–∏—Ç –Ω–µ –ø–æ-—Ä—É—Å—Å–∫–∏!")

    def eat(self):
        print("–ï—Å—Ç!")


class Persons:
    def __init__(self, name):
        self.name = name


class ZooKeeper(Persons):
    def feed_animal(self, animal_name):
        animal = Animal.fn(animal_name.strip())
        if animal:
            print(f"{self.name} –∫–æ—Ä–º–∏—Ç {animal.name} ", end="")
            animal.eat()


class Veterinarian(Persons):
    def heal_animal(self, animal_name):
        animal = Animal.fn(animal_name.strip())
        if animal:
            print(f"{self.name} –ª–µ—á–∏—Ç {animal.name} ")


class Hanter(Persons):
    def slaughter_animal(self, animal_name):
        animal = Animal.fn(animal_name.strip())
        if animal:
            print(f"{self.name} –æ—Ö–æ—Ç–∏—Ç—Å—è –∑–∞ {animal_name} ({animal.age} –ª–µ—Ç) ")
            animal.delete_animal()


class Bird(Animal):
    def make_sound(self):
        print("–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ –ø—Ç–∏—á—å–µ–º —è–∑—ã–∫–µ")


class Mammal(Animal):
    def make_sound(self):
        print("–ß—Ç–æ-—Ç–æ –±–ª–µ–µ—Ç")


class Reptile(Animal):
    def make_sound(self):
        print("–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞—Å—Ç—å –º–æ–ª—á–∞")


def animal_sounds(animal):
    animal.make_sound()


# –°–æ–∑–¥–∞–µ–º –∑–æ–æ–ø–∞—Ä–∫
zoopark = [Animal("–°—Ç–æ—Ä–æ–∂ –ü–µ—Ç—Ä–æ–≤–∏—á", 100), Bird("–ø—Ä–æ—Å—Ç–æ –ü–µ—Ç—É—Ö", 1), Mammal("–û–≤—Ü–∞ –ù–∞–¥—è", 3),
           Reptile("–ê–ª–ª–∏–≥–∞—Ç–æ—Ä –ì–µ–Ω–Ω–∞–¥–∏–π", 20), Bird("–ü–∞–≤–ª–∏–Ω –ú–∞–≤–ª–∏–Ω", 4), Reptile("–í–∞—Ä–∞–Ω –ê–±—Ä–∞–º –ì–µ–Ω—Ä–∏—Ö–æ–≤–∏—á", 31)]

print(zoopark[2].name, end=" - ")
zoopark[2].eat()

zoopark.append(Mammal("–ë–∞—Ä–∞–Ω –õ—é–¥–æ–≤–∏–≥", 4))
print('–î–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é', zoopark[-1].name)

toro = Mammal("–ë–æ—Ä—å–∫–∞", 4)
print(Mammal.__dict__)
print(toro.__dict__, toro.__class__.__name__)

zoopark = None

vt = Veterinarian("–ü–∏–ª—é–ª—å–∫–∏–Ω")
hunter = Hanter("–ò–≤–∞–Ω –û—Ö–æ—Ç–Ω–∏–∫")
hunter.slaughter_animal('–û–≤—Ü–∞ –ù–∞–¥—è')
Animal.view_zoo()
vt.heal_animal('–°—Ç–æ—Ä–æ–∂ –ü–µ—Ç—Ä–æ–≤–∏—á')
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ TXT —Ñ–∞–π–ª
Animal.save_animals_to_file()
# # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
# save_animals_to_file(zoopark, 'animals_data', 'JSON')
# # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª
# save_animals_to_file(zoopark, 'animals_data', 'CSV')
hunter.slaughter_animal("–ø—Ä–æ—Å—Ç–æ –ü–µ—Ç—É—Ö")
hunter.slaughter_animal("–ü–∞–≤–ª–∏–Ω –ú–∞–≤–ª–∏–Ω")
hunter.slaughter_animal("–í–∞—Ä–∞–Ω –ê–±—Ä–∞–º –ì–µ–Ω—Ä–∏—Ö–æ–≤–∏—á")
hunter.slaughter_animal("–ë–∞—Ä–∞–Ω –õ—é–¥–æ–≤–∏–≥")
hunter.slaughter_animal("–ë–æ—Ä—å–∫–∞")
Animal.view_zoo()
Animal.load_animals_from_file()
Animal.view_zoo()

input("\nüòÄ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞")
